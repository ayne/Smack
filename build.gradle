// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.1'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

ext {
    compileSdkVersion = 20
    buildToolsVersion = "20.0.0"

    shortVersion = '4.1.1'
    isSnapshot = true
    jxmppVersion = '0.4.2-beta1'
    smackMinAndroidSdk = 8

    gitCommit = getGitCommit()
    javadocAllDir = new File(buildDir, 'javadoc')
    documentationDir = new File(buildDir, 'documentation')
    releasedocsDir = new File(buildDir, 'releasedocs')
    rootConfigDir = new File(rootDir, 'config')
    sonatypeCredentialsAvailable = project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')
    isReleaseVersion = !isSnapshot
    signingRequired = isReleaseVersion
    sonatypeSnapshotUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
    sonatypeStagingUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
    // Returns only the date in yyyy-MM-dd format, as otherwise, with
    // hh:mm:ss information, the manifest files would change with every
    // build, causing unnecessary rebuilds.
    builtDate = (new java.text.SimpleDateFormat("yyyy-MM-dd")).format(new Date())
    oneLineDesc = 'An Open Source XMPP (Jabber) client library'
    androidProjects = [
            ':smack-tcp',
            ':smack-bosh',
            ':smack-core',
            ':smack-im',
            ':smack-resolver-minidns',
            ':smack-sasl-provided',
            ':smack-extensions',
            ':smack-experimental',
    ].collect{ project(it) }
    androidBootClasspath = getAndroidRuntimeJar()
    androidJavadocOffline = getAndroidJavadocOffline()
}

allprojects {
    repositories {
        jcenter()
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = "1.7"
        targetCompatibility = "1.7"
    }
}



def getGitCommit() {
    def dotGit = new File("$projectDir/.git")
    if (!dotGit.isDirectory()) return 'non-git build'

    def cmd = 'git describe --always --tags --dirty=+'
    def proc = cmd.execute()
    def gitCommit = proc.text.trim()
    assert !gitCommit.isEmpty()
    gitCommit
}

def getAndroidRuntimeJar() {
    def androidHome = getAndroidHome()
    def androidJar = new File("$androidHome/platforms/android-$smackMinAndroidSdk/android.jar")
    if (androidJar.isFile()) {
        return androidJar
    } else {
        throw new Exception("Can't find android.jar for $smackMinAndroidSdk API. Please install corresponding SDK platform package")
    }
}

def getAndroidJavadocOffline() {
    def androidHome = getAndroidHome()
    return androidHome.toString() + "/docs/reference"
}

def getAndroidHome() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())

    def androidHomeEnv = properties.getProperty('sdk.dir')
    if (androidHomeEnv == null) {
        throw new Exception("ANDROID_HOME environment variable is not set")
    }
    return androidHomeEnv
}
